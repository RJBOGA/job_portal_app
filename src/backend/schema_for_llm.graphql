type AuthPayload {
  token: String!
}

type User {
  UserID: Int!
  FirstName: String!
  LastName: String!
  skills: [String]
}

input UserUpdateInput {
  FirstName: String
  LastName: String
  ProfessionalTitle: String
  Summary: String
  skills: [String]
}

type Job {
  jobId: Int!
  title: String!
  company: String
  location: String
  skillsRequired: [String]
}

input JobInput {
  title: String!
  company: String
  location: String
  skillsRequired: [String]
}

type Application {
  appId: Int!
  status: String!
}

input ApplicationUpdateInput {
  status: String
}

# --- QUERIES ---
type Query {
  # Smart Queries First
  recommendedJobs: [Job!]!
  matchingCandidates(jobId: Int!): [User!]!
  analyticsJobsCount(location: String, company: String): Int!
  
  # Basic Data Queries
  users: [User!]!
  userById(UserID: Int!): User
  jobs(company: String, location: String): [Job!]!
  jobById(jobId: Int!): Job
  applications: [Application!]!
}

# --- MUTATIONS ---
type Mutation {
  # Auth
  register(email: String!, password: String!, role: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  
  # User (ONLY the secure one)
  updateMyProfile(input: UserUpdateInput!): User!
  
  # Job
  createJob(input: JobInput!): Job!
  updateJob(jobId: Int!, input: JobUpdateInput!): Job!
  deleteJob(jobId: Int!): Boolean!
  
  # Application
  apply(jobTitle: String!, companyName: String): Application!
  updateApplication(appId: Int!, input: ApplicationUpdateInput!): Application!
}